
"""Credit Card Fraud Detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I9gTl4ceyF3HeHXjdkekcMyZTwZexpCs
"""

from google.colab import drive
drive.mount('/content/gdrive')

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns 
from matplotlib import gridspec

path ="/content/gdrive/My Drive/creditcard.csv"
data = pd.read_csv(path)

print(data.shape)  # describe shape of dataset
print(data.describe()) # describe dataset

print('Fraud Cases: {}'.format(len(data[data['Class'] == 1]))) 
print('Valid Transactions: {}'.format(len(data[data['Class'] == 0])))

fraud = data[data['Class'] == 1]  # rows whose field 'Class'=1 is copied to fraud
valid = data[data['Class'] == 0]  # rows whose field 'Class'=0 is copied to valid
outlierFraction = len(fraud)/float(len(valid))  # checking the ratio differences between the two classes
print(outlierFraction)  

# dividing the X and the Y from the dataset 
Y = data["Class"] # sepating the result column
X = data.drop(['Class'], axis = 1)  # removing it from the dataframe data

print(X.shape) 
print(Y.shape) 

# getting just the values for the sake of processing (its a numpy array with no columns) 

xData = X.values # removing column headers of X 
yData = Y.values # removing column headers of Y

from sklearn.model_selection import train_test_split 
# Split the data into training and testing sets 
xTrain, xTest, yTrain, yTest = train_test_split(xData, yData, test_size = 0.2, random_state = 42) # train:test = 80:20

# Building the Random Forest Classifier (RANDOM FOREST) 
from sklearn.ensemble import RandomForestClassifier 
# random forest model creation 
rfc = RandomForestClassifier() 
rfc.fit(xTrain, yTrain) 
# predictions 
yPred = rfc.predict(xTest)

# Evaluating the classifier 
# printing every score of the classifier 
# scoring in anything 
from sklearn.metrics import accuracy_score  
from sklearn.metrics import precision_score
  
n_outliers = len(fraud) 
n_errors = (yPred != yTest).sum() 
print("The model used is Random Forest classifier") 
  
acc = accuracy_score(yTest, yPred) 
print("The accuracy is {}".format(acc)) 
  
prec = precision_score(yTest, yPred) 
print("The precision is {}".format(prec)) 


